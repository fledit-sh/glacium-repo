package: ""
# ============================================================================
#  Beispiel‑Konfig‑Datei: multi_fensap_config.yml
#  Diese YAML wird von Jinja zum Rendern des Templates
#  "multi_fensap_launcher.sh.j2" eingelesen.
#  Passe die Werte nach Bedarf an. Alle Pfade können vorwärts‑ oder rückwärts‑
#  Schrägstriche verwenden – Hauptsache in Quotes, damit YAML kein Chaos macht.
#  ---------------------------------------------------------------------------
#  Aufruf‑Beispiel:
#     jinja2 multi_fensap_launcher.sh.j2 multi_fensap_config.yml > run.sh
# ============================================================================

# -----------------------------
#  Allgemeine Steuergrößen
# -----------------------------
iterations: 3                                   # Anzahl der Multishot‑Iterationen

# -----------------------------
#  Executables & Utilities
# -----------------------------
mpiexec: "C:/Program Files/ANSYS Inc/v251/fluent/fluent25.1.0/multiport/mpi/win64/intel/bin/mpiexec.exe"
fensapmpi: "C:/Program Files/ANSYS Inc/v251/fensapice/bin_mpi/fensapMPI.exe"
waitfile: "C:/Program Files/ANSYS Inc/v251/fensapice/bin/testWaitFileNormally.exe"

# -----------------------------
#  MPI/Job‑Parameter
# -----------------------------
nproc: 4                         # Prozessoren pro Schritt
mpi_version: "2018"

# -----------------------------
#  Umgebungsvariablen
# -----------------------------
fluent_exe: "C:/Program Files/ANSYS Inc/v251/fluent/ntbin/win64/fluent"
nti_data: "C:/Program Files/ANSYS Inc/v251/fensapice/data"
nti_path: "C:/Program Files/ANSYS Inc/v251/fensapice/bin/"
mpi_bin: "C:/Program Files/ANSYS Inc/v251/fluent/fluent25.1.0/multiport/mpi/win64/intel/bin/"
mpi_wrapper: "C:/Program Files/ANSYS Inc/v251/fluent/fluent25.1.0/multiport/mpi_wrapper/win64/intel/"
fensap_bin: "C:/Program Files/ANSYS Inc/v251/fensapice/bin/"

# -----------------------------
#  Weitere Schalter
# -----------------------------
fluent2fensap_params: ""         # falls leer, einfach leer lassen
